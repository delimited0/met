list(
met::ntail(lb, ub),
met::ntail_seq(lb, ub)
)
)
microbenchmark::microbenchmark(
list = list(
met::ntail(lb, ub),
met::ntail_seq(lb, ub)
)
)
microbenchmark::microbenchmark(
met::ntail(lb, ub)
)
microbenchmark::microbenchmark(
met::ntail_seq(lb, ub)
)
met::ntail_seq(lb, ub)
x = met::ntail_seq(lb, ub)
hist(x)
d = 100
lb = rep(.1, d)
ub = rep(2, d)
x = met::ntail_seq(lb, ub)
hist(x)
d = 1000
lb = rep(.1, d)
ub = rep(2, d)
x = met::ntail_seq(lb, ub)
hist(x)
microbenchmark::microbenchmark(
met::ntail(lb, ub)
)
microbenchmark::microbenchmark(
met::ntail_seq(lb, ub)
)
library(met)
d = 1000
lb = rep(.1, d)
ub = rep(2, d)
met::ntail(lb, ub)
library(met)
d = 1000
lb = rep(-2, d)
ub = rep(2, d)
met::trnd(lb, ub)
plot(x)
hist(x)
d = 1000
lb = rep(-2, d)
ub = rep(2, d)
met::trnd(lb, ub)
hist(x)
hist(x)
d = 1000
lb = rep(-2, d)
ub = rep(2, d)
x = met::trnd(lb, ub)
hist(x)
install.packages("BH")
library(met)
x = met::trninv(-1, 1)
library(met)
x = met::trninv(-1, 1)
x
x =
replicate(1000, met::trninv(-1, 1))
x = replicate(1000, met::trninv(-1, 1))
x
hist(x)
hist(x)
x = replicate(1000, met::trninv(-1, 1))
hist(x)
library(met)
rexp(d)
d = 1000
lb = -rexp(d)
ub = rexp(d)
x = met::trandn(lb, ub)
lb
ub
d = 1000
lb = rep(-2, d)
ub = rep(1, d)
x = met::trandn(lb, ub)
lb
ub
library(met)
d = 1000
lb = rep(-2, d)
ub = rep(1, d)
x = met::trandn(lb, ub)
hist(x)
library(met)
library(met)
library(met)
library(met)
Sig <- matrix(c(1,0.9,0.9,1), 2, 2)
mu <- c(-3,0)
l <- c(-Inf,-Inf)
u <- c(-6,Inf)
A <- matrix(c(1,0,-1,1),2,2)
n <- 1e3; # number of sampled vectors
Y <- mvrandn(l - A %*% mu, u - A %*% mu, A %*% Sig %*% t(A), n)
library(met)
Sig <- matrix(c(1,0.9,0.9,1), 2, 2)
mu <- c(-3,0)
l <- c(-Inf,-Inf)
u <- c(-6,Inf)
A <- matrix(c(1,0,-1,1),2,2)
n <- 1e3; # number of sampled vectors
Y <- mvrandn(l - A %*% mu, u - A %*% mu, A %*% Sig %*% t(A), n)
Y
X <- rep(mu, n) + solve(A, diag(2)) %*% Y;
plot(X)
X
t(X)
Sigma = .5 * diag(2) + .5 * rep(1, 2) %*% t(rep(1, 2))
Sigma
mu = rep(0, 2)
Sigma = .5 * diag(2) + .5 * rep(1, 2) %*% t(rep(1, 2))
mu = rep(0, 2)
lb = rep(0, 2)
ub = rep(Inf, 2)
y = mvrandn(lb, ub, Sigma, 1000)
library(met)
y = mvrandn(lb, ub, Sigma, 1000)
y
dim(y)
plot(t(y))
Sig <- matrix(c(1,0.9,0.9,1), 2, 2)
mu <- c(-3,0)
l <- c(-Inf,-Inf)
u <- c(-6,Inf)
A <- matrix(c(1,0,-1,1),2,2)
n <- 1e3; # number of sampled vectors
Y <- mvrandn(l - A %*% mu, u - A %*% mu, A %*% Sig %*% t(A), n)
X <- rep(mu, n) + solve(A, diag(2)) %*% Y;
plot(t(X))
Sigma = .5 * diag(2) + .5 * rep(1, 2) %*% t(rep(1, 2))
mu = rep(0, 2)
lb = rep(0, 2)
ub = rep(Inf, 2)
y = mvrandn(lb, ub, Sigma, 1000)
Sigma = .5 * diag(2) + .5 * rep(1, 2) %*% t(rep(1, 2))
mu = rep(0, 2)
lb = rep(0, 2)
ub = rep(Inf, 2)
y = mvrandn(lb, ub, Sigma, 1000)
plot(y)
Sigma = .5 * diag(2) + .5 * rep(1, 2) %*% t(rep(1, 2))
mu = rep(0, 2)
lb = rep(0, 2)
ub = rep(Inf, 2)
y = mvrandn(lb, ub, Sigma, 1000)
plot(t(y))
2e7
format(2e7)
format(2e7, "long")
format(2e7, 20)
install.packages("tlrmvnmvt")
install.packages("tmvnsim")
install.packages("tmvtnorm")
foo
n = 1000
d = 2
muf <- function(d) rep(1, d)
Sigmaf <- function(d) diag(d)
lbf <- function(d) rep(-Inf, 2*d)
ubf <- function(d) c(0, rep(2, 2*d-1))
Af <- function(d) {
lower_bounds <- -diag(d)
upper_bounds <- diag(d)
upper_bounds[1, ] <- c(2, 1, rep(0, d-2))
A <- rbind(upper_bounds, lower_bounds)
return(A)
}
mu = muf(d)
Sigma = Sigmaf(d)
lb = lbf(d)
ub = ubf(d)
A = Af(d)
qrdecomp = qr(A)
qrdecomp
qr.Q(qrdecomp)
qr.R(qrdecomp)
qrdecomp = qr(t(A))
L = t(qr.R(qrdecomp))
Q = qr.Q(qrdecomp)
L
Q
L %*% t(Q)
L %*% Q
Q
n = 3000
d = 2
mu = rep(1, d)
Sigma = .5 * diag(d) + .5 * rep(1, d) %*% t(rep(1, d))
lb = rep(-2, d)
ub = rep(2, d)
A = diag(d)
rsm_samples = sampletmvn::sample_rsm(n, mu, Sigma, lb, ub)
plot(rsm_samples, main = "RSM", pch = '+')
lg2015_samples = sampletmvn::sample_gibbs_lg2015(n, mu, Sigma,lb, ub,
init = c(1, 1), thin = 0,
tuvn_sampler = "lg2015")
plot(lg2015_samples, main = "LG2015", pch = '+')
par(mfrow = c(2, 3))
rsm_samples = sampletmvn::sample_rsm(n, mu, Sigma, lb, ub)
plot(rsm_samples, main = "RSM", pch = '+')
lg2015_samples = sampletmvn::sample_gibbs_lg2015(n, mu, Sigma,lb, ub,
init = c(1, 1), thin = 0,
tuvn_sampler = "lg2015")
plot(lg2015_samples, main = "LG2015", pch = '+')
ry2004_samples = sampletmvn::sample_gibbs_ry2004(n, mu, Sigma, lb, ub, A,
init = c(1, 1), thin = 0,
tuvn_sampler = "lg2015")
plot(ry2004_samples, main = "RY2004", pch = '+')
liness_samples = lincongauss::rtmvn(n, mu, Sigma, lb, ub, x_init = c(1, 1))
plot(liness_samples, main = "LINESS", pch = '+')
epess_samples = epmgpr::rtmvn(n, mu, Sigma, lb, ub, initial = c(1, 1))
plot(epess_samples, main = "EPESS", pch = "+")
rhmc_samples = truncmvnorm::rhmc_rtmvn(n, mu, Sigma, lb, ub, initial = c(0, 0))
plot(rhmc_samples)
met_samples = met::mvrandn(lb, ub, Sigma, n, mu)
plot(met_samples)
met_samples
plot(t(met_samples))
rsm_samples = sampletmvn::sample_rsm(n, mu, Sigma, lb, ub)
plot(rsm_samples, main = "RSM", pch = '+')
lg2015_samples = sampletmvn::sample_gibbs_lg2015(n, mu, Sigma,lb, ub,
init = c(1, 1), thin = 0,
tuvn_sampler = "lg2015")
plot(lg2015_samples, main = "LG2015", pch = '+')
ry2004_samples = sampletmvn::sample_gibbs_ry2004(n, mu, Sigma, lb, ub, A,
init = c(1, 1), thin = 0,
tuvn_sampler = "lg2015")
plot(ry2004_samples, main = "RY2004", pch = '+')
liness_samples = lincongauss::rtmvn(n, mu, Sigma, lb, ub, x_init = c(1, 1))
plot(liness_samples, main = "LINESS", pch = '+')
epess_samples = epmgpr::rtmvn(n, mu, Sigma, lb, ub, initial = c(1, 1))
plot(epess_samples, main = "EPESS", pch = "+")
met_samples = met::mvrandn(lb, ub, Sigma, n, mu)
plot(t(met_samples))
rhmc_samples = truncmvnorm::rhmc_rtmvn(n, mu, Sigma, lb, ub, initial = c(0, 0))
plot(rhmc_samples, main = "MET", pch = "+")
par(mfrow = c(2, 3))
rsm_samples = sampletmvn::sample_rsm(n, mu, Sigma, lb, ub)
plot(rsm_samples, main = "RSM", pch = '+')
lg2015_samples = sampletmvn::sample_gibbs_lg2015(n, mu, Sigma,lb, ub,
init = c(1, 1), thin = 0,
tuvn_sampler = "lg2015")
plot(lg2015_samples, main = "LG2015", pch = '+')
ry2004_samples = sampletmvn::sample_gibbs_ry2004(n, mu, Sigma, lb, ub, A,
init = c(1, 1), thin = 0,
tuvn_sampler = "lg2015")
plot(ry2004_samples, main = "RY2004", pch = '+')
liness_samples = lincongauss::rtmvn(n, mu, Sigma, lb, ub, x_init = c(1, 1))
plot(liness_samples, main = "LINESS", pch = '+')
epess_samples = epmgpr::rtmvn(n, mu, Sigma, lb, ub, initial = c(1, 1))
plot(epess_samples, main = "EPESS", pch = "+")
met_samples = met::mvrandn(lb, ub, Sigma, n, mu)
plot(t(met_samples))
rsm_samples = sampletmvn::sample_rsm(n, mu, Sigma, lb, ub)
plot(rsm_samples, main = "RSM", pch = '+')
lg2015_samples = sampletmvn::sample_gibbs_lg2015(n, mu, Sigma,lb, ub,
init = c(1, 1), thin = 0,
tuvn_sampler = "lg2015")
plot(lg2015_samples, main = "LG2015", pch = '+')
ry2004_samples = sampletmvn::sample_gibbs_ry2004(n, mu, Sigma, lb, ub, A,
init = c(1, 1), thin = 0,
tuvn_sampler = "lg2015")
plot(ry2004_samples, main = "RY2004", pch = '+')
liness_samples = lincongauss::rtmvn(n, mu, Sigma, lb, ub, x_init = c(1, 1))
plot(liness_samples, main = "LINESS", pch = '+')
epess_samples = epmgpr::rtmvn(n, mu, Sigma, lb, ub, initial = c(1, 1))
plot(epess_samples, main = "EPESS", pch = "+")
met_samples = met::mvrandn(lb, ub, Sigma, n, mu)
plot(t(met_samples), main = "MET", pch = "+")
summary(met_samples)
summary(t(met_samples))
n = 1000
d = 2
mu = rep(2, d)
Sigma = .5 * diag(d) + .5 * rep(1, d) %*% t(rep(1, d))
lb = rep(0, d)
ub = rep(Inf, d)
A = diag(d)
par(mfrow = c(2, 3))
rsm_samples = sampletmvn::sample_rsm(n, mu, Sigma, lb, ub)
plot(rsm_samples, main = "RSM")
lg2015_samples = sampletmvn::sample_gibbs_lg2015(n, mu, Sigma,
lower = lb, upper = ub,
init = c(1, 1), thin = 0,
tuvn_sampler = "be2017")
plot(lg2015_samples, main = "LG2015")
ry2004_samples = sampletmvn::sample_gibbs_ry2004(n, mu, Sigma,
lb, ub,
init = c(1, 1), thin = 0,
tuvn_sampler = "lg2015")
plot(ry2004_samples, main = "RY2004")
liness_samples = lincongauss::rtmvn(n, mu, Sigma, lb, ub, x_init = c(1, 1))
plot(liness_samples, main = "LINESS")
epess_samples = epmgpr::rtmvn(n, mu, Sigma, lb, ub, initial = c(1, 1), J = 1)
plot(epess_samples, main = "EPESS")
met_samples = met::mvrandn(lb, ub, Sigma, n, mu)
plot(t(met_samples), main = "MET", pch = "+")
n = 1000
d = 2
mu = rep(2, d)
Sigma = .5 * diag(d) + .5 * rep(1, d) %*% t(rep(1, d))
lb = rep(0, d)
ub = rep(Inf, d)
A = diag(d)
par(mfrow = c(2, 3))
rsm_samples = sampletmvn::sample_rsm(n, mu, Sigma, lb, ub)
plot(rsm_samples, main = "RSM")
lg2015_samples = sampletmvn::sample_gibbs_lg2015(n, mu, Sigma,
lower = lb, upper = ub,
init = c(1, 1), thin = 0,
tuvn_sampler = "be2017")
plot(lg2015_samples, main = "LG2015")
ry2004_samples = sampletmvn::sample_gibbs_ry2004(n, mu, Sigma,
lb, ub,
init = c(1, 1), thin = 0,
tuvn_sampler = "lg2015")
plot(ry2004_samples, main = "RY2004")
liness_samples = lincongauss::rtmvn(n, mu, Sigma, lb, ub, x_init = c(1, 1))
plot(liness_samples, main = "LINESS")
epess_samples = epmgpr::rtmvn(n, mu, Sigma, lb, ub, initial = c(1, 1), J = 1)
plot(epess_samples, main = "EPESS")
met_samples = met::mvrandn(lb, ub, Sigma, n, mu)
plot(t(met_samples), main = "MET")
Sigma = .5 * diag(2) + .5 * rep(1, 2) %*% t(rep(1, 2))
mu = rep(0, 2)
lb = rep(0, 2)
ub = rep(Inf, 2)
y = met::mvrandn(lb, ub, Sigma, 1000)
plot(t(y))
library(met)
x = met::rtmvnorm(n, mu, Sigma, lb, ub)
n = 1000
Sigma = .5 * diag(2) + .5 * rep(1, 2) %*% t(rep(1, 2))
mu = rep(0, 2)
lb = rep(0, 2)
ub = rep(Inf, 2)
x = met::rtmvnorm(n, mu, Sigma, lb, ub)
plot(x)
library(met)
randtoolbox::sobol(100, 9, init = TRUE)
out = randtoolbox::sobol(100, 9, init = TRUE)
dim(out)
plot(out)
View(out)
out = randtoolbox::sobol(100, 9, init = TRUE, scrambling = 1)
?randtoolbox::sobol
out = randtoolbox::sobol(100, 9, init = TRUE, scrambling = 1, seed=ceiling(1e6*runif(1))))
out = randtoolbox::sobol(100, 9, init = TRUE, scrambling = 1, seed=ceiling(1e6*runif(1)))
dim(out)
?crossprod
// truncation limits
arma::vec tl = l(k) - mu(k) - col;
}
?cases
case
cases
install.packages("memisc")
?memisc::cases
d4 <- cases(
is.na(d) -> 0,
d > threshhold +2 -> 1,
d <= threshhold -> 2,
na.rm=FALSE
)
d4 <- memisc::cases(
is.na(d) -> 0,
d > threshhold +2 -> 1,
d <= threshhold -> 2,
na.rm=FALSE
)
fun <- function(x)
cases(
x==0      -> 1,
abs(x)> 1 -> abs(x),
abs(x)<=1 -> x^2
)
x <- seq(from=-2,to=2,length=101)
plot(fun(x)~x)
library(memisc)
x <- seq(from=-2,to=2,length=101)
plot(fun(x)~x)
x
x <- seq(from=-2,to=2,length=101)
cases(
x==0      -> 1,
abs(x)> 1 -> abs(x),
abs(x)<=1 -> x^2
)
norminvp <- function (p, l, u){
if ((length(l) != length(p)) | any(l > u) | any(p > 1) |  any(p < 0)) {
stop("l, u, and p must be the same length with u > l and 0 <= p <= 1")
}
x = rep(NaN, length(l))
K <- ((p < 1) + (p > 0)) == 2L
browser()
if(any(K)){
x[K] = cases(p = p[K], l = l[K], u = u[K])
}
if(sum(K) == length(p)){
return(x)
}
I1 <- (p == 1)
x[I1] = u[I1]
I2 <- (p == 0)
x[I2] = l[I2]
return(x)
}
norminvp(runif(d),l = 1:d, u = rep(Inf, d))
d = 150
norminvp(runif(d),l = 1:d, u = rep(Inf, d))
K
p[K]
l
l[K]
u
x
norminvp(runif(d),l = 1:d, u = rep(Inf, d))
cases(p = p[K], l = l[K], u = u[K])
p[K]
l[K]
p
l
u
sum(K)
x
sum(K)
length(p)
any(K)
x
I1 <- (p == 1)
I1
x[I1] = u[I1]
x
I2 <- (p == 0)
x[I2] = l[I2]
return(x)
x
u
l
summary(p)
cases(p = p[K], l = l[K], u = u[K])
?cases
cases(p = p[K])
cases(p = p[K], l = l[K])
cases(p <- p[K], l <- l[K])
p[K]
cases(p <- p[K] > 0, l <- l[K] > 0)
p
l
u
TruncatedNormal::qtnorm(p[1], 0, 1, l[1], u[1])
l
p[1]
detach(memisc)
detach("memisc")
detach("package:memisc", unload = TRUE)
library(met)
library(met)
library(met)
x <- as.matrix(randtoolbox::sobol(n, dim = d-1, init =TRUE, scrambling = 1, seed=ceiling(1e6*runif(1))))
n =100
d
x <- as.matrix(randtoolbox::sobol(n, dim = d-1, init =TRUE, scrambling = 1, seed=ceiling(1e6*runif(1))))
x
dim(x)
head(x)
x <- as.matrix(randtoolbox::sobol(n, dim = d-1, init =TRUE, scrambling = 1, seed=ceiling(1e6*runif(1))))
head(x)
x[1, 1:10]
x <- as.matrix(randtoolbox::sobol(n, dim = d-1, init =TRUE, scrambling = 1, seed=ceiling(1e6*runif(1))))
x[1, 1:10]
library(met)
d <- 15
l <- 1:d
u <- rep(Inf, d)
Sig <- matrix(rnorm(d^2), d, d)*2
Sig <- Sig %*% t(Sig)
mvNqmc(l, u, Sig, 1e4) # compute the probability
library(met)
mvNqmc(l, u, Sig, 1e4) # compute the probability
library(met)
d <- 15
l <- 1:d
u <- rep(Inf, d)
Sig <- matrix(rnorm(d^2), d, d)*2
Sig <- Sig %*% t(Sig)
mvNqmc(l, u, Sig, 1e4) # compute the probability
library(met)
d <- 15
l <- 1:d
u <- rep(Inf, d)
Sig <- matrix(rnorm(d^2), d, d)*2
Sig <- Sig %*% t(Sig)
mvNqmc(l, u, Sig, 1e4) # compute the probability
library(met)
d <- 15
l <- 1:d
u <- rep(Inf, d)
Sig <- matrix(rnorm(d^2), d, d)*2
Sig <- Sig %*% t(Sig)
mvNqmc(l, u, Sig, 1e4) # compute the probability
ceiling(10000 / 12)
