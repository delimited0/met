crossprod
?crossprod
TruncatedNormal:::mvrandn()
TruncatedNormal:::trandn
?TruncatedNormal:::trandn
ntail
TruncatedNormal::ntail
?TruncatedNormal:::ntail
?expm1
n = 1000
d = 2
muf <- function(d) rep(0, d)
Sigmaf <- function(d) diag(d)
lbf <- function(d) rep(-Inf, 2*d)
ubf <- function(d) c(0, rep(2, 2*d-1))
Af <- function(d) {
lower_bounds <- -diag(d)
upper_bounds <- diag(d)
upper_bounds[1, ] <- c(2, 1, rep(0, d-2))
A <- rbind(upper_bounds, lower_bounds)
return(A)
}
mu = muf(d)
Sigma = Sigmaf(d)
lb = lbf(d)
ub = ubf(d)
A = Af(d)
A
rref
gibbs_mr_samples = sampletmvn::sample_gibbs_mixed_rejection(n, mu, Sigma, A, lb, ub,
init = c(1, 1), thin = 0)
plot(gibbs_mr_samples)
plot(gibbs_mr_samples)
>qr
?qr
t(A)
qr.solve(t(A))
qr.coef(t(A))
qr(t(A))
qr_tA = qr(t(A))
?qr
upper.tri(qr_tA$qr)
L = qr_tA$qr
L = qr_tA$qr[upper.tri(qr_tA$qr)]
L
qr_tA$qr
d = 2
muf <- function(d) rep(0, d)
Sigmaf <- function(d) diag(d)
lbf <- function(d) rep(-Inf, 2*d)
ubf <- function(d) c(0, rep(2, 2*d-1))
Af <- function(d) {
lower_bounds <- -diag(d)
upper_bounds <- diag(d)
upper_bounds[1, ] <- c(2, 1, rep(0, d-2))
A <- rbind(upper_bounds, lower_bounds)
return(A)
}
mu = muf(d)
Sigma = Sigmaf(d)
lb = lbf(d)
ub = ubf(d)
A = Af(d)
qr_tA = qr(t(A))
upper.tri(qr_tA$qr)
which(arr.ind = TRUE, upper.tri(qr_tA$qr))
idx = which(arr.ind = TRUE, upper.tri(qr_tA$qr))
qr_tA$qr[idx, ]
qr_tA$qr[idx]
qr_tA[upper.tri(qr_tA$qr)]
qr_tA$qr[upper.tri(qr_tA$qr)]
qr_tA$qr
as.matrix(qr_tA$qr[upper.tri(qr_tA$qr)])
qr_tA
?uper.tri
?upper.tri
upper.tri(qr_tA$qr)
?qr_tA
qr_tA
?qr
lower.tri(qr_tA$qr)
upper.tri(qr_tA$qr)
upper.tri(qr_tA$qr)
!upper.tri(qr_tA$qr)
qr_tA$qr[!upper.tri(qr_tA$qr)]
qr_tA$qr
Matrix::qr(A)
?Matrix::qr
R = qr.R(qr_tA)
R
Q = qr.Q(qr_tA)
Q
R = qr.R(qr_tA)
U = qr.Q(qr_tA)
L = t(R)
Q = t(U)
L
Q
L %*% Q
A
L
Q
d = 10
muf <- function(d) rep(0, d)
Sigmaf <- function(d) diag(d)
lbf <- function(d) rep(-Inf, 2*d)
ubf <- function(d) c(0, rep(2, 2*d-1))
Af <- function(d) {
lower_bounds <- -diag(d)
upper_bounds <- diag(d)
upper_bounds[1, ] <- c(2, 1, rep(0, d-2))
A <- rbind(upper_bounds, lower_bounds)
return(A)
}
mu = muf(d)
Sigma = Sigmaf(d)
lb = lbf(d)
ub = ubf(d)
A = Af(d)
mu = muf(d)
Sigma = Sigmaf(d)
lb = lbf(d)
ub = ubf(d)
A = Af(d)
mu
Sigma
lb
ub
A
qr_tA = qr(t(A))
R = qr.R(qr_tA)
U = qr.Q(qr_tA)
L = t(R)
Q = t(U)
L %*% Q
A
L
dim(L)
L
Q
dim(L)
dim(R)
dim(U)
dim(A)
volesti::gen_rand_hpoly(d, nfacets = 8)
foo = volesti::gen_rand_hpoly(d, nfacets = 8)
foo
foo()
foo$A
qr_tA = qr(t(foo$A))
R = qr.R(qr_tA)
U = qr.Q(qr_tA)
L = t(R)
Q = t(U)
L
View(L)
foo = volesti::gen_cross(d, "H")
foo
qr_tA = qr(t(foo$A))
R = qr.R(qr_tA)
U = qr.Q(qr_tA)
L = t(R)
Q = t(U)
d
2^10
?volesti::gen_cross
L
d = 10
mu = muf(d)
Sigma = Sigmaf(d)
lb = lbf(d)
ub = ubf(d)
A = Af(d)
qr_tA = qr(t(A))
R = qr.R(qr_tA)
U = qr.Q(qr_tA)
L = t(R)
Q = t(U)
L
lb
ub
?chol
A
d = 2
mu = muf(d)
Sigma = Sigmaf(d)
lb = lbf(d)
ub = ubf(d)
A = Af(d)
A
ub
install.packages("Rcpp")
install.packages("RcppEigen")
install.packages("RcppArmadillo")
fma
sessionInfo()
rep(2, d)
rep(2, 2)
rep(1, 2)
rep(1, 2) %*% t(rep(1, 2))
rnorm(10)
rep(1, 2)
rep(1, 2) %*% t(rep(1, 2))
sessionInfo()
library(met)
install.packages("testthat")
library(met)
d = 2
lb = rep(-1, d)
ub = rep(2, d)
met::ntail(lb, ub)
library(met)
d = 2
lb = rep(-1, d)
ub = rep(2, d)
met::ntail(lb, ub)
library(met)
d = 2
lb = rep(-1, d)
ub = rep(2, d)
met::ntail(lb, ub)
library(met)
d = 2
lb = rep(-1, d)
ub = rep(2, d)
met::ntail(lb, ub)
library(met)
d = 2
lb = rep(-1, d)
ub = rep(2, d)
met::ntail(lb, ub)
d = 2
lb = rep(-1, d)
ub = rep(2, d)
met::ntail(lb, ub)
d = 2
lb = rep(-1, d)
ub = rep(2, d)
met::ntail(lb, ub)
d = 2
lb = rep(-1, d)
ub = rep(2, d)
met::ntail(lb, ub)
d = 2
lb = rep(-1, d)
ub = rep(2, d)
met::ntail(lb, ub)
d = 2
lb = rep(-1, d)
ub = rep(2, d)
met::ntail(lb, ub)
d = 2
lb = rep(-1, d)
ub = rep(2, d)
met::ntail(lb, ub)
d = 2
lb = rep(-1, d)
ub = rep(2, d)
met::ntail(lb, ub)
d = 2
lb = rep(-1, d)
ub = rep(2, d)
met::ntail(lb, ub)
d = 2
lb = rep(-1, d)
ub = rep(2, d)
met::ntail(lb, ub)
d = 2
lb = rep(-1, d)
ub = rep(2, d)
met::ntail(lb, ub)
d = 2
lb = rep(-1, d)
ub = rep(2, d)
met::ntail(lb, ub)
d = 2
lb = rep(-1, d)
ub = rep(1, d)
met::ntail(lb, ub)
d = 2
lb = rep(-1, d)
ub = rep(1, d)
met::ntail(lb, ub)
d = 2
lb = rep(-1, d)
ub = rep(1, d)
met::ntail(lb, ub)
d = 2
lb = rep(-1, d)
ub = rep(1, d)
met::ntail(lb, ub)
d = 2
lb = rep(.1, d)
ub = rep(1, d)
met::ntail(lb, ub)
d = 2
lb = rep(.1, d)
ub = rep(1, d)
met::ntail(lb, ub)
d = 2
lb = rep(.1, d)
ub = rep(1, d)
met::ntail(lb, ub)
d = 2
lb = rep(.1, d)
ub = rep(1, d)
met::ntail(lb, ub)
library(met)
d = 5
lb = rep(-2, d)
ub = rep(2, d)
met::trnd(lb, ub)
d = 5
lb = rep(-2, d)
ub = rep(2, d)
met::trnd(lb, ub)
d = 5
lb = rep(-2, d)
ub = rep(2, d)
met::trnd(lb, ub)
d = 5
lb = rep(-2, d)
ub = rep(2, d)
met::trnd(lb, ub)
d = 5
lb = rep(-2, d)
ub = rep(2, d)
met::trnd(lb, ub)
d = 5
lb = rep(-2, d)
ub = rep(2, d)
met::trnd(lb, ub)
d = 5
lb = rep(.1, d)
ub = rep(1, d)
met::ntail(lb, ub)
d = 5
lb = rep(.1, d)
ub = rep(1, d)
met::ntail(lb, ub)
d = 5
lb = rep(.1, d)
ub = rep(1, d)
met::ntail(lb, ub)
d = 5
lb = rep(.1, d)
ub = rep(1, d)
met::ntail(lb, ub)
d = 5
lb = rep(.1, d)
ub = rep(1, d)
met::ntail(lb, ub)
d = 5
lb = rep(.1, d)
ub = rep(1, d)
met::ntail(lb, ub)
d = 5
lb = rep(.1, d)
ub = rep(1, d)
met::ntail(lb, ub)
d = 5
lb = rep(.1, d)
ub = rep(1, d)
met::ntail(lb, ub)
d = 5
lb = rep(-2, d)
ub = rep(2, d)
met::trnd(lb, ub)
d = 5
lb = rep(-2, d)
ub = rep(2, d)
met::trnd(lb, ub)
d = 5
lb = rep(-2, d)
ub = rep(2, d)
met::trnd(lb, ub)
install.packages("tictoc")
install.packages("microbenchmark")
install.packages("data.table")
version
version
library(met)
library(met)
d = 5
lb = rep(.1, d)
ub = rep(1, d)
met::ntail(lb, ub)
met::ntail_seq(lb, ub)
library(met)
met::ntail_seq(lb, ub)
met::ntail(lb, ub)
library(met)
met::ntail_seq(lb, ub)
library(met)
met::ntail_seq(lb, ub)
d = 5
met::ntail_seq(lb, ub)
met::ntail_seq(lb, ub)
met::ntail_seq(lb, ub)
?microbenchmark::microbenchmark
d = 100
lb = rep(.1, d)
ub = rep(1, d)
microbenchmark::microbenchmark({
met::ntail(lb, ub)
met::ntail_seq(lb, ub)
})
microbenchmark::microbenchmark(
list(
met::ntail(lb, ub),
met::ntail_seq(lb, ub)
)
)
microbenchmark::microbenchmark(
list = list(
met::ntail(lb, ub),
met::ntail_seq(lb, ub)
)
)
microbenchmark::microbenchmark(
met::ntail(lb, ub)
)
microbenchmark::microbenchmark(
met::ntail_seq(lb, ub)
)
met::ntail_seq(lb, ub)
x = met::ntail_seq(lb, ub)
hist(x)
d = 100
lb = rep(.1, d)
ub = rep(2, d)
x = met::ntail_seq(lb, ub)
hist(x)
d = 1000
lb = rep(.1, d)
ub = rep(2, d)
x = met::ntail_seq(lb, ub)
hist(x)
microbenchmark::microbenchmark(
met::ntail(lb, ub)
)
microbenchmark::microbenchmark(
met::ntail_seq(lb, ub)
)
library(met)
d = 1000
lb = rep(.1, d)
ub = rep(2, d)
met::ntail(lb, ub)
library(met)
d = 1000
lb = rep(-2, d)
ub = rep(2, d)
met::trnd(lb, ub)
plot(x)
hist(x)
d = 1000
lb = rep(-2, d)
ub = rep(2, d)
met::trnd(lb, ub)
hist(x)
hist(x)
d = 1000
lb = rep(-2, d)
ub = rep(2, d)
x = met::trnd(lb, ub)
hist(x)
install.packages("BH")
library(met)
x = met::trninv(-1, 1)
library(met)
x = met::trninv(-1, 1)
x
x =
replicate(1000, met::trninv(-1, 1))
x = replicate(1000, met::trninv(-1, 1))
x
hist(x)
hist(x)
x = replicate(1000, met::trninv(-1, 1))
hist(x)
library(met)
rexp(d)
d = 1000
lb = -rexp(d)
ub = rexp(d)
x = met::trandn(lb, ub)
lb
ub
d = 1000
lb = rep(-2, d)
ub = rep(1, d)
x = met::trandn(lb, ub)
lb
ub
library(met)
d = 1000
lb = rep(-2, d)
ub = rep(1, d)
x = met::trandn(lb, ub)
hist(x)
library(met)
library(met)
library(met)
