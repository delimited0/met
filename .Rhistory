plot(x)
library(met)
randtoolbox::sobol(100, 9, init = TRUE)
out = randtoolbox::sobol(100, 9, init = TRUE)
dim(out)
plot(out)
View(out)
out = randtoolbox::sobol(100, 9, init = TRUE, scrambling = 1)
?randtoolbox::sobol
out = randtoolbox::sobol(100, 9, init = TRUE, scrambling = 1, seed=ceiling(1e6*runif(1))))
out = randtoolbox::sobol(100, 9, init = TRUE, scrambling = 1, seed=ceiling(1e6*runif(1)))
dim(out)
?crossprod
// truncation limits
arma::vec tl = l(k) - mu(k) - col;
}
?cases
case
cases
install.packages("memisc")
?memisc::cases
d4 <- cases(
is.na(d) -> 0,
d > threshhold +2 -> 1,
d <= threshhold -> 2,
na.rm=FALSE
)
d4 <- memisc::cases(
is.na(d) -> 0,
d > threshhold +2 -> 1,
d <= threshhold -> 2,
na.rm=FALSE
)
fun <- function(x)
cases(
x==0      -> 1,
abs(x)> 1 -> abs(x),
abs(x)<=1 -> x^2
)
x <- seq(from=-2,to=2,length=101)
plot(fun(x)~x)
library(memisc)
x <- seq(from=-2,to=2,length=101)
plot(fun(x)~x)
x
x <- seq(from=-2,to=2,length=101)
cases(
x==0      -> 1,
abs(x)> 1 -> abs(x),
abs(x)<=1 -> x^2
)
norminvp <- function (p, l, u){
if ((length(l) != length(p)) | any(l > u) | any(p > 1) |  any(p < 0)) {
stop("l, u, and p must be the same length with u > l and 0 <= p <= 1")
}
x = rep(NaN, length(l))
K <- ((p < 1) + (p > 0)) == 2L
browser()
if(any(K)){
x[K] = cases(p = p[K], l = l[K], u = u[K])
}
if(sum(K) == length(p)){
return(x)
}
I1 <- (p == 1)
x[I1] = u[I1]
I2 <- (p == 0)
x[I2] = l[I2]
return(x)
}
norminvp(runif(d),l = 1:d, u = rep(Inf, d))
d = 150
norminvp(runif(d),l = 1:d, u = rep(Inf, d))
K
p[K]
l
l[K]
u
x
norminvp(runif(d),l = 1:d, u = rep(Inf, d))
cases(p = p[K], l = l[K], u = u[K])
p[K]
l[K]
p
l
u
sum(K)
x
sum(K)
length(p)
any(K)
x
I1 <- (p == 1)
I1
x[I1] = u[I1]
x
I2 <- (p == 0)
x[I2] = l[I2]
return(x)
x
u
l
summary(p)
cases(p = p[K], l = l[K], u = u[K])
?cases
cases(p = p[K])
cases(p = p[K], l = l[K])
cases(p <- p[K], l <- l[K])
p[K]
cases(p <- p[K] > 0, l <- l[K] > 0)
p
l
u
TruncatedNormal::qtnorm(p[1], 0, 1, l[1], u[1])
l
p[1]
detach(memisc)
detach("memisc")
detach("package:memisc", unload = TRUE)
library(met)
library(met)
library(met)
x <- as.matrix(randtoolbox::sobol(n, dim = d-1, init =TRUE, scrambling = 1, seed=ceiling(1e6*runif(1))))
n =100
d
x <- as.matrix(randtoolbox::sobol(n, dim = d-1, init =TRUE, scrambling = 1, seed=ceiling(1e6*runif(1))))
x
dim(x)
head(x)
x <- as.matrix(randtoolbox::sobol(n, dim = d-1, init =TRUE, scrambling = 1, seed=ceiling(1e6*runif(1))))
head(x)
x[1, 1:10]
x <- as.matrix(randtoolbox::sobol(n, dim = d-1, init =TRUE, scrambling = 1, seed=ceiling(1e6*runif(1))))
x[1, 1:10]
library(met)
d <- 15
l <- 1:d
u <- rep(Inf, d)
Sig <- matrix(rnorm(d^2), d, d)*2
Sig <- Sig %*% t(Sig)
mvNqmc(l, u, Sig, 1e4) # compute the probability
library(met)
mvNqmc(l, u, Sig, 1e4) # compute the probability
library(met)
d <- 15
l <- 1:d
u <- rep(Inf, d)
Sig <- matrix(rnorm(d^2), d, d)*2
Sig <- Sig %*% t(Sig)
mvNqmc(l, u, Sig, 1e4) # compute the probability
library(met)
d <- 15
l <- 1:d
u <- rep(Inf, d)
Sig <- matrix(rnorm(d^2), d, d)*2
Sig <- Sig %*% t(Sig)
mvNqmc(l, u, Sig, 1e4) # compute the probability
library(met)
d <- 15
l <- 1:d
u <- rep(Inf, d)
Sig <- matrix(rnorm(d^2), d, d)*2
Sig <- Sig %*% t(Sig)
mvNqmc(l, u, Sig, 1e4) # compute the probability
ceiling(10000 / 12)
d <- 15
l <- 1:d
u <- rep(Inf, d)
Sig <- matrix(rnorm(d^2), d, d)*2
Sig <- Sig %*% t(Sig)
mvNqmc(l, u, Sig, 1e4) # compute the probability
met::mvNqmc(l, u, Sig, 1e4) # compute the probability
library(met)
d <- 15
l <- 1:d
u <- rep(Inf, d)
Sig <- matrix(rnorm(d^2), d, d)*2
Sig <- Sig %*% t(Sig)
Sig
met::mvNqmc(l, u, Sig, 1e4) # compute the probability
randtoolbox::sobol(ceiling(n/12), dim = d-1, init =TRUE, scrambling = 1, seed=ceiling(1e6*runif(1)))
randtoolbox::sobol(ceiling(1e4/12), dim = d-1, init =TRUE, scrambling = 1, seed=ceiling(1e6*runif(1)))
foo = randtoolbox::sobol(ceiling(1e4/12), dim = d-1, init =TRUE, scrambling = 1, seed=ceiling(1e6*runif(1)))
library(met)
d <- 15
l <- 1:d
u <- rep(Inf, d)
Sig <- matrix(rnorm(d^2), d, d)*2
Sig <- Sig %*% t(Sig)
met::mvNqmc(l, u, Sig, 1e4) # compute the probabili
library(met)
met::mvNqmc(l, u, Sig, 1e4) # compute the probability
library(met)
met::mvNqmc(l, u, Sig, 1e4) # compute the probability
library(met)
met::mvNqmc(l, u, Sig, 1e4) # compute the probability
?crossprod
Sigma
Sig
met::mvNqmc(l, u, Sig, 1e4) # compute the probability
library(met)
met::mvNqmc(l, u, Sig, 1e4) # compute the probability
library(met)
met::mvNqmc(l, u, Sig, 1e4) # compute the probability
met::mvNqmc(l, u, Sig, 1e4) # compute the probability
library(met)
met::mvNqmc(l, u, Sig, 1e4) # compute the probability
Sig
Sig[3, 1:2 ]
library(met)
met::mvNqmc(l, u, Sig, 1e4) # compute the probability
Sig[1:3, ]
library(met)
met::mvNqmc(l, u, Sig, 1e4) # compute the probability
library(met)
library(met)
met::mvNqmc(l, u, Sig, 1e4) # compute the probability
Sig[20,]
Sig[10,]
Sig[10,] %*% diag(1:10)
Sig[10,] %*% matrix(1, nrow = 10, ncol = 20)
library(met)
Sig[10,] %*% matrix(1, nrow = 10, ncol = 20)
met::mvNqmc(l, u, Sig, 1e4) # compute the probability
library(met)
met::mvNqmc(l, u, Sig, 1e4) # compute the probability
library(met)
met::mvNqmc(l, u, Sig, 1e4) # compute the probability
library(met)
met::mvNqmc(l, u, Sig, 1e4) # compute the probability
prob
relErr
exp(psy(x, L, l, u, mu))
x
library(met)
met::mvNqmc(l, u, Sig, 1e4) # compute the probability
TruncatedNormal::mvNqmc(l, u, Sig, 1e4)
TruncatedNormal::mvNqmc(l, u, Sig, 1e4)
library(met)
met::mvNqmc(l, u, Sig, 1e4) # compute the probability
TruncatedNormal::mvNqmc(l, u, Sig, 1e4)
met::mvNqmc(l, u, Sig, 1e4) # compute the probability
150000 / 12
150000 / 4
150000 / 48
?TruncatedNormal::pmvnorm
library(met)
n = 1000
Sigma = .5 * diag(2) + .5 * rep(1, 2) %*% t(rep(1, 2))
mu = rep(0, 2)
lb = rep(0, 2)
ub = rep(Inf, 2)
library(met)
met::pmvnorm(mu, Sigma, lb, ub)
mu
A
Sigma
d <- 15
l <- 1:d
u <- rep(Inf, d)
Sig <- matrix(rnorm(d^2), d, d)*2
Sig <- Sig %*% t(Sig)
met::mvNqmc(l, u, Sig, 1e4) # compute the probability
library(met)
Sig
Sigma
n = 1000
Sigma = .5 * diag(2) + .5 * rep(1, 2) %*% t(rep(1, 2))
mu = rep(0, 2)
lb = rep(0, 2)
ub = rep(Inf, 2)
met::pmvnorm(mu, Sigma, lb, ub)
library(met)
met::pmvnorm(mu, Sigma, lb, ub)
L
l
u
mu
qmc_pts
n_est
mvnprqmc(ceiling(n/n_est), L = L, l = l, u = u, mu = mu, qmc_pts)
met::mvNqmc(lb, ub, Sigma, 1e5, 12)
d <- 15
l <- 1:d
u <- rep(Inf, d)
Sig <- matrix(rnorm(d^2), d, d)*2
Sig <- Sig %*% t(Sig)
met::mvNqmc(l, u, Sig, 1e4) # compute the probability
L
dim(L)
l
u
mu
length(mu)
qmc_pts
n / n_est
l
lb
u
ub
Sigma
Sig
library(met)
met::mvNqmc(lb, ub, Sigma, 1e5, 12)
met::mvNqmc(l, u, Sig, 1e4) # compute the probability
met::mvNqmc(lb, ub, Sigma)
l
lb
u
ub
Sigma
Sig
met::mvNqmc(lb, ub, Sigma)
met::mvNqmc(l, u, Sig, 1e4) # compute the probability
met::pmvnorm(mu, Sigma, lb, ub)
met::pmvnorm(rep(0, d), Sig, l, u)
met::mvNqmc(l, u, Sig, 1e4) # compute the probability
met::pmvnorm(rep(0, d), Sig, l, u)
Sigma = .5 * diag(d) + .5 * rep(1, d) %*% t(rep(1, d))
Sigma
d = 3
lb = rep(0, d)
ub = rep(Inf, d)
Sigma = .5 * diag(d) + .5 * rep(1, d) %*% t(rep(1, d))
Sigma
met::mvNqmc(lb, ub, Sigma)
library(met)
n = 1000
Sigma = .5 * diag(2) + .5 * rep(1, 2) %*% t(rep(1, 2))
mu = rep(0, 2)
lb = rep(0, 2)
ub = rep(Inf, 2)
met::mvNqmc(lb, ub, Sigma)
library(met)
Sigma
met::mvNqmc(lb, ub, Sigma)
library(met)
met::mvNqmc(lb, ub, Sigma)
library(met)
Sig <- matrix(c(1,0.9,0.9,1), 2, 2)
mu <- c(-3,0)
l <- c(-Inf,-Inf)
u <- c(-6,Inf)
A <- matrix(c(1,0,-1,1),2,2)
n <- 1e3; # number of sampled vectors
Y <- mvrandn(l - A %*% mu, u - A %*% mu, A %*% Sig %*% t(A), n)
X <- rep(mu, n) + solve(A, diag(2)) %*% Y;
Y <- met::mvrandn(l - A %*% mu, u - A %*% mu, A %*% Sig %*% t(A), n)
X <- rep(mu, n) + solve(A, diag(2)) %*% Y;
plot(t(X))
A %*% X
n = 1000
Sigma = .5 * diag(2) + .5 * rep(1, 2) %*% t(rep(1, 2))
mu = rep(0, 2)
lb = rep(0, 2)
ub = rep(Inf, 2)
y = met::mvrandn(lb, ub, Sigma, 1000)
plot(t(y))
summary(t(y))
x = met::rtmvnorm(n, mu, Sigma, lb, ub)
plot(x)
x = met::rtmvnorm(n, mu, Sigma, lb, ub)
x = met::rtmvn(n, mu, Sigma, lb, ub)
plot(x)
summary(x)
met::mvNqmc(lb, ub, Sigma)
d <- 15
l <- 1:d
u <- rep(Inf, d)
Sig <- matrix(rnorm(d^2), d, d)*2
Sig <- Sig %*% t(Sig)
met::mvNqmc(l, u, Sig, 1e4) # compute the probability
met::pmvnorm(rep(0, d), Sig, l, u)
d = 2
lb = rep(-3, d)
ub = rep(3, d)
mu = rep(0, d)
Sigma = diag(d)
n = 5000
samples = met::rtmvn(n, mu, Sigma, lb, ub)
samples
plot(samples)
summary(samples)
# identity rectangle ------------------------------------------------------
d = 10
lb = rep(-3, d)
ub = rep(3, d)
mu = rep(0, d)
Sigma = diag(d)
n = 5000
samples = met::rtmvn(n, mu, Sigma, lb, ub)
summary(samples)
plot(samples[, c(3, 4)])
# identity rectangle ------------------------------------------------------
d = 100
lb = rep(-3, d)
ub = rep(3, d)
mu = rep(0, d)
Sigma = diag(d)
n = 5000
samples = met::rtmvn(n, mu, Sigma, lb, ub)
summary(samples)
plot(samples[, c(3, 4)])
# identity rectangle ------------------------------------------------------
d = 1000
lb = rep(-3, d)
ub = rep(3, d)
mu = rep(0, d)
Sigma = diag(d)
n = 5000
samples = met::rtmvn(n, mu, Sigma, lb, ub)
summary(samples)
plot(samples[, c(3, 4)])
structure
?structure
d = 3
lb = rep(0, d)
ub = rep(Inf, d)
Sigma = .5 * diag(d) + .5 * rep(1, d) %*% t(rep(1, d))
met::mvNqmc(lb, ub, Sigma)
met::pmvnorm(mu, Sigma, lb, ub)
mu = rep(0, d)
met::pmvnorm(mu, Sigma, lb, ub)
library(met)
TruncatedNormal::pmvn(mu, Sigma, lb, ub)
met::pmvn(mu, Sigma, lb, ub)
TruncatedNormal::pmvnorm(mu, Sigma, lb, ub)
met::mvNqmc(lb, ub, Sigma)
library(met)
met::pmvn(mu, Sigma, lb, ub)
TruncatedNormal::pmvnorm(mu, Sigma, lb, ub)
TruncatedNormal::pmvnorm(mu, Sigma, lb, ub)
met::pmvn(mu, Sigma, lb, ub)
met::pmvn(mu, Sigma, lb, ub)
TruncatedNormal::pmvnorm(mu, Sigma, lb, ub)
library(met)
met::pmvn(mu, Sigma, lb, ub, n = 1000)
d = 2000
lb = rep(0, d)
ub = rep(Inf, d)
Sigma = .5*diag(d) + .5*rep(1, d) %*% t(rep(1,d))
mu = rep(0, d)
met::pmvn(mu, Sigma, lb, ub, n = 1000)
d = 2000
lb = rep(0, d)
ub = rep(Inf, d)
Sigma = .5*diag(d) + .5*rep(1, d) %*% t(rep(1,d))
mu = rep(0, d)
met::pmvn(mu, Sigma, lb, ub, n = 1000)
print(dim)
print(iter)
print(maxit)
print(scramblmixed)
print(scrambling)
scramblmixed
print(scramblmixed)
print(sobolres)
print iter
print(iter)
print(myrandseed)
print(result)
met::pmvn(mu, Sigma, lb, ub, n = 1500)
met::pmvn(mu, Sigma, lb, ub, n = 1000)
install.packages("qrng")
library(met)
library(met)
library(met)
# high dimensional check --------------------------------------------------
d = 1000
richtmyer(d, 1000)
dim(richtmyer(d, 1000))
2e7
e7
2e7
2e7 - 2000000
2e7 - 20000000
1000 * 2000
richtmyer(20, 100)
dim(richtmyer(20, 100))
library(met)
1000 / 10
library(met)
d = 1000
lb = rep(0, d)
ub = rep(Inf, d)
Sigma = .5*diag(d) + .5*rep(1, d) %*% t(rep(1,d))
mu = rep(0, d)
met::pmvn(mu, Sigma, lb, ub, n = 1000)
1/ 1001
TruncatedNormal::pmvnorm(mu, Sigma, lb, ub)
12000 / 12
tictoc::tic()
met::pmvn(mu, Sigma, lb, ub, n = 1000, n_est = 12)
tictoc::toc()
tictoc::tic()
TruncatedNormal::pmvnorm(mu, Sigma, lb, ub, B = 12000, type = "qmc")
tictoc::toc()
8 * 20
160 / 60
d = 2000
lb = rep(0, d)
ub = rep(Inf, d)
Sigma = .5*diag(d) + .5*rep(1, d) %*% t(rep(1,d))
mu = rep(0, d)
tictoc::tic()
met::pmvn(mu, Sigma, lb, ub, n = 1000, n_est = 10)
tictoc::toc()
1 / (d+1)\
1 / (d+1)
library(met)
library(met)
library(met)
